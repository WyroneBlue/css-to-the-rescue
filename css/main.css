*, *::before, *::after{
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    position: relative;
}

/* Custom properties */
:root{

    --play-rhythm: 0.6s;
    --play-state: paused;

    --volume-level: 50;
    --volume-level-max: 20;

    --no-power-bg: black;
    --no-power-shadow: inset 0 0 10px gray, inset 0 0 20px black, inset 0 0 30px gray;
    --powered-bg: rgba(0, 0, 0, 0.8);

    --box-container-shadow: drop-shadow(0 0 5px white);

    --handle-color: black;
    --handle-color-sides: var(--handle-color);

    --metalic-grey: #2b2b2b;
    --metalic-grey-light: #3b3b3b;

    --perspective: 600px;

    --box-color: var(--metalic-grey);
    --led-display-off: rgb(25, 25, 25);
    --led-display-on: rgba(107, 115, 145, 0.797);
    --led-color: rgba(0, 0, 0, 0.1);
    --led-color-on: rgba(0, 255, 0, 0.8);

    --human-pupils: #5C4033;
    --human-pupils-size: 25%;

    --speaker-color: var(--metalic-grey-light);
    --speaker-middle-size: 15%;
    --speaker-border: var(--handle-color);
    --laser-color: red;

    --laser-pupils-size: var(--speaker-middle-size);

    --bg-color-1: black;
    --bg-color-2: blue;
    --bg-color-3: yellow;
    --bg-color-4: green;
    --bg-color-5: red;
    --bg-color-6: purple;
    --bg-color-7: orange;
    --bg-color-8: pink;
    --bg-color-9: brown;
    --bg-color-10: grey;
}

@property --led-color{
    syntax: "<color>";
    initial-value: rgba(0, 0, 0, 0.1);
    inherits: false;
}

@property --led-display-on{
    syntax: "<color>";
    initial-value: rgba(0, 0, 0, 0.1);
    inherits: false;
}

/* No background colors for reduce motion */
@media (prefers-reduced-motion) {
    :root{
        --bg-color-1: transparent;
        --bg-color-2: transparent;
        --bg-color-3: transparent;
        --bg-color-4: transparent;
        --bg-color-5: transparent;
        --bg-color-6: transparent;
        --bg-color-7: transparent;
        --bg-color-8: transparent;
        --bg-color-9: transparent;
        --bg-color-10: transparent;

        --laser-color: rgba(255, 0, 0, 0.1);
    }
}

ul{
    list-style: none;
}

label{
    cursor: pointer;
}

body{
    overflow: hidden;
    background-color: var(--no-power-bg);
    filter: brightness(.8);
    box-shadow: var(--no-power-shadow);
}

/* Body when power button is on */
body:has([aria-label="power-button"] input:checked){
    background-color: var(--powered-bg);
    box-shadow: none;
}

main{
    display: grid;
    place-content: center;
    height: 100vh;
    width: 100vw;
}

/* Main when the boombox mode is on and the power button is on */
body:has(label[aria-label="boombox-mode"] input:checked)
main:has([aria-label="power-button"] input:checked):has([aria-label="play-controls"] label:nth-of-type(2) input:checked){
    animation: bg-party calc(var(--play-rhythm) * 10) infinite;
}

/* animation timing steps checken */
/* Part BG  */
@keyframes bg-party {
    0%, 9% {
        background-color: var(--bg-color-1);
    }
    10%, 19% {
        background-color: var(--bg-color-2);
    }
    20%, 29% {
        background-color: var(--bg-color-2);
    }
    30%, 39% {
        background-color: var(--bg-color-3);
    }
    40%, 49% {
        background-color: var(--bg-color-4);
    }
    50%, 59% {
        background-color: var(--bg-color-5);
    }
    60%, 69% {
        background-color: var(--bg-color-6);
    }
    70%, 79% {
        background-color: var(--bg-color-7);
    }
    80%, 89% {
        background-color: var(--bg-color-8);
    }
    90%, 100% {
        background-color: var(--bg-color-9);
    }
}

/* Boombox container */
main > section{
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 50px;
    padding: 10px;
    filter: var(--box-container-shadow);
}

/* Boombox container when the boombox mode is on and the power button is on and play is pressed */
body:has(label[aria-label="boombox-mode"] input:checked):has([aria-label="power-button"] input:checked)
main:has([aria-label="play-controls"] label:nth-of-type(2) input:checked)
> section{
    filter: none;
    animation: boombox-bounce calc(var(--play-rhythm) * 2) infinite;
}

@keyframes boombox-bounce {
    0% {
        transform: rotate(0);
        transform-origin: bottom left;
    }
    25% {
        transform: rotate(calc(var(--volume-level) / 100 * 1deg));
        transform-origin: bottom left;
    }
    50% {
        transform: rotate(0);
        transform-origin: bottom;
    }
    75% {
        transform: rotate(calc(var(--volume-level) / 100 * -1deg));
        transform-origin: bottom right;
    }
    100% {
        transform: rotate(0);
        transform-origin: bottom right;
    }
}
/* End boombox container */

/* Handle */
main > section > section{
    display: block;
    width: 100%;
    height: 25px;
    background: var(--handle-color);
    border-radius: 10px;
}

main > section > section::before,
main > section > section::after{
    content: "";
    position: absolute;
    width: 25px;
    height: 100px;
    background: var(--handle-color);
    border-radius: inherit;
}

main > section > section::before{
    left: 0;
}

main > section > section::after{
    right: 0;
}
/* End handle */

/* Box */
main > section > div{
    display: grid;
    grid-template-columns: 4fr 3fr 4fr;
    height: 300px;
    width: 600px;
    background: var(--box-color);
    outline-width: 5px;
    outline-style: solid;
    outline-color: var(--led-color);
    outline-offset: -10px;
}

/* Box when power button is pressed */
main:has([aria-label="power-button"] input:checked) > section > div{
    --led-color: var(--led-color-on);
    outline-color: var(--led-color-on);
}

/* Box in boombox mode when power button is pressed and play button is pressed */
body:has([aria-label="boombox-mode"] input:checked):has([aria-label="power-button"] input:checked):has([aria-label="play-controls"] label:nth-of-type(2) input:checked)
main > section > div{
    animation: led-lights 5s infinite alternate;
}

/* Lightshow animation */
@keyframes led-lights {
    30% {
        --led-color: var(--bg-color-3);
        outline-color: var(--led-color);
    }
    60% {
        --led-color: var(--bg-color-7);
        outline-color: var(--led-color);
    }
    100% {
        --led-color: var(--bg-color-5);
        outline-color: var(--led-color);
    }
}

/* Box in mystery mode when power button is pressed and play button is pressed */
body:has([aria-label="mystery-mode"] input:checked):has([aria-label="play-controls"] label:nth-of-type(2) input:checked)
main > section > div{
    animation: transition-equalizer 3s forwards;
}

@keyframes transition-equalizer{
    from{
        outline-color: var(--led-display-on);
    }
    to{
        --led-display-on: var(--laser-color);
        outline-color: var(--led-display-on);
    }
}

/* Box: speakers */
main > section > div > section{
    place-self: center;
    width: 80%;
    aspect-ratio: 1/1;
    border-radius: 50%;
    border: 2px solid var(--speaker-border);
    background-color: var(--metalic-grey-light);

    transform-style: preserve-3d;
    perspective: var(--perspective);
    z-index: 9;
}

/* Box: speakers when mystery mode is on and play is pressed */
body:has(label[aria-label="mystery-mode"] input:checked):has([aria-label="play-controls"] label:nth-of-type(2) input:checked) main > section > div > section{
    animation: move-eyes 3s infinite;
}

/* Moving eyes animation for mystery mode */
@keyframes move-eyes {
    0%{
        transform: rotate3d(5, 2, 0, 0deg);
    }
    20%{
        transform: rotate3d(2, 1, 1, 23deg);
    }
    50% {
        transform: rotate3d(3, 3, 0, 10deg);
    }
    70%{
        transform: rotate3d(8, 2, 1, 35deg);
    }
    90% {
        transform: rotate3d(5, 2, 0, -6deg);
    }
    100% {
        transform: rotate3d(0, 0, 0, 0);
    }
}

/* Box: speakers when boombox mode is on and power button is on and play is pressed */
body:has(label[aria-label="boombox-mode"] input:checked)
main:has([aria-label="power-button"] input:checked):has([aria-label="play-controls"] label:nth-of-type(2) input:checked)
> section > div > section{
    animation: speaker-bump var(--play-rhythm) infinite;
}

/* Speaker bump animation */
@keyframes speaker-bump {
    0% {
        transform: scale(1);
    }
    20% {
        box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.8);
        transform: scale(calc(1 + var(--volume-level) / 400));
        border: 4px solid black;
    }
    100% {
        transform: scale(1);
    }
}

/* Box: speaker pupils */
main > section > div > section::before{
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    width: 15%;
    height: 15%;
    border-radius: inherit;
    transform: translate(-50%, -50%);
    background: black;
    box-shadow: 0 0 60px rgba(0, 0, 0, 0.5);
}

/* Box: speaker pupils when boombox mode is on and power button is on and play is pressed */
body:has(label[aria-label="boombox-mode"] input:checked)
main:has([aria-label="power-button"] input:checked):has([aria-label="play-controls"] label:nth-of-type(2) input:checked)
> section > div > section::before{
    box-shadow: 0 0 30px rgba(0, 0, 0, 0.9);
}

/* Box: speaker upils when mystery mode is on and play is pressed */
body:has(label[aria-label="mystery-mode"] input:checked)
main:has([aria-label="play-controls"] label:nth-of-type(2) input:checked) > section > div > section::before{
    animation: eye-transition .8s ease-out forwards;
}

/* Eye transition animation */
@keyframes eye-transition {
    0% {
        transform: translate(-50%, -50%) scale(1);
    }
    20%{
        transform: translate(-50%, -50%) scale(1.2);
    }
    100% {
        background-color: var(--laser-color);
        transform: translate(-50%, -50%) scale(1);
    }
}

/* Box: speaker laser */
main > section > div > section::after{
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    border-radius: 20px;
    background-color: var(--laser-color);
    transform-origin: bottom;
    transform: translate3d(-50%, -50%, 0) rotateY(90deg);
}

/* Box: speaker laser when mystery mode is on and play is pressed */
body:has(label[aria-label="mystery-mode"] input:checked)
main:has([aria-label="play-controls"] label:nth-of-type(2) input:checked) > section > div > section::after{
    animation: laser 4s ease-out 1s infinite;
}

/* Laser animation */
@keyframes laser {
    0% {
        opacity: 0;
    }
    10%, 90% {
        opacity: 1;
        width: var(--perspective);
        transform: translate3d(-50%, -50%, 300px) rotateY(90deg);
    }
    100% {
        opacity: 0;
        width: 0;
    }
}

/* Speaker mid section */
main > section > div > div{
    display: grid;
    grid-template-rows: 4fr 1fr 3fr 2fr;
    align-content: center;
    gap: 10px;
    padding: 20px 0;
    overflow: hidden;
}

/* Speaker mid section: Mask */
main > section > div > div > section[aria-label="mask"]{
    position: absolute;
    inset-inline: -2px;
    bottom: 0;
    height: calc(50% - 10px);
    background-color: var(--metalic-grey-light);
    z-index: 1;
    transform: translateY(100%);
    transition: all 0.5s;
}

/* Speaker mid section: Mask when mystery mode is on */
body:has(label[aria-label="mystery-mode"] input:checked) main > section > div > div > section[aria-label="mask"]{
    bottom: 10px;
    transform: translateY(0);
}


/* Speaker mid section: Mask tongue */
main > section > div > div > section[aria-label="mask"] div {
    position: relative;
    display: flex;
    height: 100%;
    width: 100%;
}

main > section > div > div > section[aria-label="mask"] div span{
    position: absolute;
    display: flex;
    bottom: 10px;
    left: 50%;
    width: 50%;
    height: 60px;
    background-color: pink;
    border-radius: 0 0 50% 50%;
    transform: translateX(-50%);
    transform-origin: top;
}

body:has(label[aria-label="mystery-mode"] input:checked)
main:has([aria-label="play-controls"] label:nth-of-type(2) input:checked)
> section > div > div > section[aria-label="mask"] div span{
    animation: lick 1s ease-in-out infinite;
}

@keyframes lick{
    0% {
        transform: translateX(-50%) rotateX(0deg);
    }
    25% {
        transform: translateX(-50%) rotateX(50deg);
    }
    50% {
        transform: translateX(-50%) rotateX(-30deg);
    }
    75% {
        transform: translateX(-50%) rotateX(60deg);
    }
    100% {
        transform: translateX(-50%) rotateX(0deg);
    }
}

main > section > div > div > section[aria-label="mask"] div::before{
    content: "";
    position: absolute;
    inset-inline: 0;
    bottom: 60px;
    height: 40%;
    border: solid 5px #000;
    border-color: #000 transparent transparent transparent;
    border-radius: 100%/100px 100px 0 0;
    transform: rotate(180deg);
}

main > section > div > div > section[aria-label="mask"] div span::after{
    content: "";
    position: absolute;
    top: 0;
    left: 50%;
    width: 3px;
    height: 60%;
    background-color: rgb(243, 162, 176);
    border-radius: 0 0 50% 50%;
    transform: translateX(-50%);
}
/* End speaker mid section: Mask */

/*  Speaker mid section: equalizer container */
main > section > div > div > section[aria-label="equalizer"]{
    display: flex;
    justify-content: center;
    gap: 10px;
    background-color: var(--led-display-off);
}

/*  Speaker mid section: equalizer container when power button is pressed */
body:has([aria-label="power-button"] input:checked)
main > section > div > div > section[aria-label="equalizer"],
body:has([aria-label="mystery-mode"] input:checked)
main > section > div > div > section[aria-label="equalizer"]{
    background-color: var(--led-display-on);
}

body:has([aria-label="mystery-mode"] input:checked)
main:has([aria-label="play-controls"] label:nth-of-type(2) input:checked)
> section > div > div > section[aria-label="equalizer"]{
    --led-display-on: var(--laser-color);
    background-color: var(--led-display-on);
}

/*  Speaker mid section: equalizer bar */
main > section > div > div > section[aria-label="equalizer"] span {
    display: block;
    align-self: end;
    width: 20px;
    height: 10%;
    background: black;
}

/*  Speaker mid section: equalizer bar when boombox mode is on and power button is pressed and play button is pressed*/
body:has(label[aria-label="boombox-mode"] input:checked)
main:has([aria-label="power-button"] input:checked):has([aria-label="play-controls"] label:nth-of-type(2) input:checked)
> section > div > div > section[aria-label="equalizer"] span {
    animation: equalize var(--play-rhythm) infinite;
}

/*  Speaker mid section: equalizer bar when boombox mode is on and power button is pressed and play button is pressed and prev button is pressed*/
body:has(label[aria-label="boombox-mode"] input:checked)
main:has([aria-label="power-button"] input:checked):has([aria-label="play-controls"] label:first-of-type input:checked){
    --play-rhythm: .3s;
}

/*  Speaker mid section: equalizer bar when boombox mode is on and power button is pressed and play button is pressed and next button is pressed*/
main:has([aria-label="power-button"] input:checked):has([aria-label="play-controls"] label:last-of-type input:checked){
    --play-rhythm: .6s;
}

/*  Speaker mid section: equalizer bar animation */
@keyframes equalize {
    0% {
        height: 0%;
    }
    10% {
        height: calc(100% / 100 * var(--volume-level) - var(--volume-level-max));
    }
    100% {
        height: 0%;
    }
}

/*  Speaker mid section: equalizer bar 1 height while animation is active*/
body:has(label[aria-label="boombox-mode"] input:checked)
main:has([aria-label="power-button"] input:checked):has([aria-label="play-controls"] label:nth-of-type(2) input:checked)
> section > div > div > section[aria-label="equalizer"] span:nth-child(1){
    height: calc(100% / 100 * var(--volume-level) - var(--volume-level-max));
}

/*  Speaker mid section: equalizer bar 2 height while animation is active*/
body:has(label[aria-label="boombox-mode"] input:checked)
main:has([aria-label="power-button"] input:checked):has([aria-label="play-controls"] label:nth-of-type(2) input:checked)
> section > div > div > section[aria-label="equalizer"] span:nth-child(2){
    height: calc(100% / 100 * var(--volume-level) - var(--volume-level-max));
}

/*  Speaker mid section: equalizer bar 3 height while animation is active*/
body:has(label[aria-label="boombox-mode"] input:checked)
main:has([aria-label="power-button"] input:checked):has([aria-label="play-controls"] label:nth-of-type(2) input:checked)
> section > div > div > section[aria-label="equalizer"] span:nth-child(3){
    height: calc(100% / 100 * var(--volume-level));
}

/*  Speaker mid section: equalizer bar 4 height while animation is active*/
body:has(label[aria-label="boombox-mode"] input:checked)
main:has([aria-label="power-button"] input:checked):has([aria-label="play-controls"] label:nth-of-type(2) input:checked)
> section > div > div > section[aria-label="equalizer"] span:nth-child(4){
    height: calc(100% / 100 * var(--volume-level) - var(--volume-level-max));
}

/*  Speaker mid section: equalizer bar 5 height while animation is active*/
body:has(label[aria-label="boombox-mode"] input:checked)
main:has([aria-label="power-button"] input:checked):has([aria-label="play-controls"] label:nth-of-type(2) input:checked)
> section > div > div > section[aria-label="equalizer"] span:nth-child(5){
    height: calc(100% / 100 * var(--volume-level) - var(--volume-level-max));
}

/*  Speaker mid section: play controls */
main > section > div > div > section[aria-label="play-controls"]{
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 2px;
}

/*  Speaker mid section: play controls button */
main > section > div > div > section[aria-label="play-controls"] label{
    display: grid;
    place-content: center;
    color: black;
    font-size: .8rem;
    background-image: linear-gradient(#000,#fff);
    box-shadow: 0px 1px 4px -2px #333;
    text-shadow: 0px -1px #333;
    pointer-events: none;
}

/*  Speaker mid section: play controls button glass shine */
main > section > div > div > section[aria-label="play-controls"] label::after{
	content: '';
	position: absolute;
	top: 2px;
	left: 2px;
	width: calc(100% - 4px);
	height: 50%;
	background: linear-gradient(rgba(255,255,255,0.8), rgba(255,255,255,0.2));
}

/*  Speaker mid section: play controls button when power button is pressed */
main:has([aria-label="power-button"] input:checked)
> section > div > div > section[aria-label="play-controls"] label,
body:has([aria-label="mystery-mode"] input:checked)
main > section > div > div > section[aria-label="play-controls"] label{
    background-image: linear-gradient(#000,#fff);
    box-shadow: 0px 1px 4px -2px #333;
    text-shadow: 0px -1px #333;
    pointer-events: all;
}

/*  Speaker mid section: play controls button glass shine when power button is pressed */
main:has([aria-label="power-button"] input:checked)
> section > div > div > section[aria-label="play-controls"] label::after{
    background: linear-gradient(rgba(255,255,255,0.8), rgba(255,255,255,0.2));
}


/*  Speaker mid section: play controls button glass shine when power button is pressed and button self is pressed*/
main:has([aria-label="power-button"] input:checked)
> section > div > div > section[aria-label="play-controls"] label:has(input:checked),
body:has([aria-label="mystery-mode"] input:checked)
main > section > div > div > section[aria-label="play-controls"] label:has(input:checked){
    color: white;
    background-image: linear-gradient(#073,#0fa);
}

main > section > div > div > section[aria-label="play-controls"] label input{
    display: none;
}

/*  Speaker mid section: Power button */
main > section > div > div label[aria-label="power-button"]{
    align-self: center;
    justify-self: center;
    display: grid;
    place-content: center;
    height: 50px;
    width: 50px;
    background-image: linear-gradient(#700,#f00);
    box-shadow: 0px 1px 4px -2px #333;
    text-shadow: 0px -1px #333;
}

/*  Speaker mid section: Power button glass shine */
main > section > div > div label[aria-label="power-button"]::after{
    content: '';
    position: absolute;
    top: 2px;
    left: 2px;
    width: calc(100% - 4px);
    height: 50%;
    background: linear-gradient(rgba(255,255,255,0.8), rgba(255,255,255,0.2));
}

/*  Speaker mid section: Power button glass shine when power button pressed */
main > section > div > div label[aria-label="power-button"]:has(input:checked){
    color: white;
    background-image: linear-gradient(green, lightgreen);
}

main > section > div > div label[aria-label="power-button"] input{
    display: none;
}

/*  Speaker mid section: Volume slider */
input[type="range"] {
    -webkit-appearance:none !important;
    background-color: black;
    height: 5px;
}

/*  Speaker mid section: Volume slider thumb */
input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none !important;
    height: 23px;
    width: 12px;
    background: black;
    border-left: 3px solid grey;
    border-right: 3px solid grey;
    cursor: grab;
}

/*  Speaker mid section: Volume slider thumb on grab(active) */
input[type="range"]:active::-webkit-slider-thumb {
    cursor: grabbing;
}

/*  Speaker mid section: Volume slider thumb on hover */
input[type="range"]::-webkit-slider-thumb:hover {
    background: black;
    border-color: grey;
}
/* End mid section */

/* Mode selector */
footer {
    position: fixed;
    bottom: 10px;
    inset-inline: 0;
}

/* Mode selector container */
footer menu{
    display: flex;
    justify-content: center;
    align-items: center;
    width: 50%;
    margin-inline: auto;
    border-radius: 20px;
    overflow: hidden;
    background-color: var(--metalic-grey-light);
}

/* Mode selector container active bg */
footer menu::before{
    content: "";
    position: absolute;
    inset-block: 0;
    width: 50%;
    left: 0;
    background-color: green;
    transition: transform 0.5s;
}

/* Mode selector button */
footer label{
    flex: 1 1;
    display: grid;
    place-content: center;
    height: 50px;
    color: white;
}

/* Mode selector button active bg when boombox mode is active */
footer menu:has(label:first-of-type input:checked)::before{
    transform: translateX(0);
}

/* Mode selector button active bg when mystery mode is active */
footer menu:has(label:last-of-type input:checked)::before{
    transform: translateX(100%);
}

footer label input{
    display: none;
}
/* End mode selector */
